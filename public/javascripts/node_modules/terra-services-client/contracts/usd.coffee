equery = require "../lib/equery"

class Tokens extends equery

  contracts:
    contract:
      address: "0x0"
      interface: [{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":true,"inputs":[],"name":"standard","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"decimalUnits","type":"uint8"},{"name":"tokenSymbol","type":"string"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Try","type":"event"}]

  constructor: (token_address) ->
    @contracts.contract.address = token_address
    super()

    @contract.Try.listen (args...) ->
      #console.log "args:"
      #console.log args
      aba = 1

    @event_listener = @contract.Transfer.listen (sender,recipienct, value)=>
      console.log "new transfer:",sender,"->",recipienct,"amount",value

  transfer: (to,amount)->
    @contract.transfer {gas: 3000000,amount:0},to,amount,(tx_id) -> console.log("transfer complete txid: "+tx_id)

  totalsupply: (me)-> @contract.totalSupply (tot)->console.log tot
  stop: ()-> @event_listener.stop()
  wait: (cb)=> setTimeout((()=>cb()),2000)

module.exports = Tokens

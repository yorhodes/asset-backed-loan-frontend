equery = require "../lib/equery"

class Router extends equery

  policy:
    stake: 100000       #ether
  contracts:
    router:
      address: "0x388d14be0bc65c5cc4d690ac884239fc653b1bb6"
      interface: [{"constant":false,"inputs":[{"name":"program","type":"bytes32"},{"name":"nonce","type":"uint256"},{"name":"bounty","type":"uint256"},{"name":"callback_address","type":"address"},{"name":"callback_function","type":"string"},{"name":"args","type":"bytes"}],"name":"run","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[],"name":"register_worker","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"isSecondary","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"machine","type":"address"}],"name":"is_worker","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[],"name":"challenge_primary","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"bytes32"},{"name":"_data","type":"bytes"}],"name":"primary_resolve","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"isPrimary","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"bytes32"},{"name":"result_hash","type":"bytes32"}],"name":"primary_submit","outputs":[],"type":"function"},{"inputs":[{"name":"_primary","type":"address"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"bytes32"},{"indexed":false,"name":"program","type":"bytes32"},{"indexed":false,"name":"args","type":"bytes"},{"indexed":false,"name":"bounty","type":"uint256"}],"name":"Query","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"bytes32"},{"indexed":false,"name":"result","type":"bytes32"}],"name":"Challenge","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"done","type":"bool"},{"indexed":false,"name":"nonce","type":"int256"}],"name":"register_worker_callback","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"bytes32"}],"name":"run_callback","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"uint256"}],"name":"Console","type":"event"}]
  users:
    me: "0xc749c2599303d29c31b46f8268a3293e86b867b5"
  is_primary: false


  constructor: (query_handler) ->
    super()

    #register as worker
    @router.is_worker @me.address,(am_worker)=>

      if !am_worker
        console.log "not worker, registering..."
        @router.register_worker {value: @policy.stake,gas:1000000},(success)=>
          console.log "registered!"
          if !success
            console.log "could not register as worker"


    @log = @router.Console.listen (val) => console.log "val:"+val
    @listen = @router.Query.listen (id, program, args, bounty)=> query_handler(id, program, args, bounty)

  primary_submit: (id,result_hash)->
    @router.primary_submit id,result_hash



  execute:(program,args,nonce,bounty,callback_addr,callback) ->
    @router.run program,args,nonce,bounty,callback_addr,(id)=> callback(id)
  stop: ()-> @listen.stop()
module.exports = Router

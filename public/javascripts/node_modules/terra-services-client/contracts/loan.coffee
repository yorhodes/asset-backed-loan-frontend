equery = require "../lib/equery"

class Loan extends equery

  contracts:
    contract:
      address: "0x0"
      interface: [{"constant":false,"inputs":[{"name":"new_exchange_rate","type":"uint256"}],"name":"set_exchange_rate","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"sell","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"loans","outputs":[{"name":"collateral","type":"uint256"},{"name":"amount","type":"uint256"},{"name":"fee","type":"uint256"},{"name":"exists","type":"bool"},{"name":"time","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"_borrower","type":"address"}],"name":"in_the_money","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"borrow","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_borrower","type":"address"}],"name":"force_sell","outputs":[],"type":"function"},{"inputs":[{"name":"_usd","type":"address"},{"name":"_kraken_account","type":"address"},{"name":"_fee_percentage","type":"uint256"},{"name":"_reward_percentage","type":"uint256"},{"name":"_exchange_rate","type":"uint256"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"collateral","type":"uint256"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"fee","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"NewLoan","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"b","type":"address"}],"name":"SellCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"b","type":"address"}],"name":"ForceSellCompleted","type":"event"}]

  constructor: (token_address,new_loan_event,force_sell_completed,sell_completed) ->
    @contracts.contract.address = token_address
    super()

    @a = @contract.NewLoan.listen (collateral,amount,fee_for_this_loan,block_number)-> new_loan_event(collateral,amount,fee_for_this_loan,block_number)
    @b = @contract.ForceSellCompleted.listen (borrower)-> force_sell_completed(borrower)
    @c = @contract.SellCompleted.listen (borrower)-> sell_completed(borrower)

  set_exchange_rate: (new_rate,done)-> @contract.set_exchange_rate new_rate,(tx_id) -> done(tx_id)

  borrow: (amount_in_usd , collateralandfee_in_eth,done)->
    @contract.borrow {value: @web3.toWei(collateralandfee_in_eth,"ether"), gas: 1000000}, amount_in_usd, (txid) -> done(txid)

  sell: ()->
    @contract.sell (txid)-> console.log "sell completed",txid

  force_sell: (_borrower,done)->
    @contract.force_sell _borrower,(txid)->
      console.log "force sell completed. borrower: " + _borrower
      done(txid)

  stop: ()-> @event_listener.stop()
  wait: (cb)=> setTimeout((()=>cb()),2000)

module.exports = Loan
